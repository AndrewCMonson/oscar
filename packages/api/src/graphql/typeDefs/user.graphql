type User {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  auth0sub: String!
  firstName: String
  lastName: String
  username: String!
  role: String
  messages: [Message]
  conversations: [Conversation]
  projects: [Project]
  tasks: [Task]
  preferenceId: String
  memoryId: String
  preferences: UserPreferences
  memory: UserMemory
  notificationSettings: UserNotificationSettings
}

type UserPreferences {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  tone: String
  responseStyle: String
  preferredLanguage: String
  timezone: String
  integrations: [UserIntegration]
  user: User
}

type UserIntegration {
  id: ID!
  type: IntegrationType
  enabled: Boolean
  apiToken: String
  baseUrl: String
  workspace: String
  userPreferencesId: String
  userPreferences: UserPreferences
}

type UserNotificationSettings {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  email: Boolean
  sms: Boolean
  inApp: Boolean
  user: User
}

type UserMemory {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  memories: [Memory]
  version: Int
  lastSummary: DateTime
  user: User
}

type Memory {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  note: String
  userMemory: UserMemory
  userMemoryId: String
}

type Query {
  users: [User]
  user(auth0Sub: String!): User!
}

type Mutation {
  createUser(
    email: String!
    username: String!
    role: String
    auth0sub: String!
  ): User
  updateUser(
    id: ID!
    email: String
    firstName: String
    lastName: String
    username: String
    role: String
  ): User
  deleteUser(id: ID!): User
}
