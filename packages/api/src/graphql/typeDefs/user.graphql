type User {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  auth0sub: String!
  firstName: String
  lastName: String
  username: String
  githubAccessToken: String
  role: String
  messages: [Message]
  conversations: [Conversation]
  projects: [Project]
  preferenceId: String
  preferences: UserPreferences
}

type UserPreferences {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  tone: Tone
  responseStyle: ResponseStyle
  preferredLanguage: String
  chatModel: String
  timezone: String
}

input UserPreferencesInput {
  tone: Tone
  responseStyle: ResponseStyle
  preferredLanguage: String
  chatModel: String
  timezone: String
}

type Query {
  users: [User]
  user(auth0Sub: String!): User!
}

type Mutation {
  createUser(
    email: String!
    username: String!
    role: String
    auth0sub: String!
  ): User
  updateUser(
    id: ID!
    email: String
    firstName: String
    lastName: String
    username: String
    role: String
  ): User
  updateUserPreferences(
    auth0sub: String!
    preferences: UserPreferencesInput
  ): UserPreferences
  deleteUser(id: ID!): User
}
