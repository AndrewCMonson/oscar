// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ChatGPTRole {
  USER
  SYSTEM
  ASSISTANT
  FUNCTION
}

enum ProjectType {
  INTERNAL
  CLIENT
  PERSONAL
}

model User {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique
  firstName       String?
  lastName        String?
  username        String
  role            ChatGPTRole      @default(USER)
  userPreferences Json
  userMemory      Json
  messages        Message[]
  chats           Chat[]
  projects        Project[]
  tasks           Task[]
  preferencesId   String?
  memoryId        String?
  preferences     UserPreferences? @relation(fields: [preferencesId], references: [id])
  memory          UserMemory?      @relation(fields: [memoryId], references: [id])
}

model UserPreferences {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  preferencesData Json
  User            User[]
}

model UserMemory {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  memoryData  Json
  version     Int       @default(1)
  lastSummary DateTime?
  User        User[]
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
}

model Message {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  role            ChatGPTRole
  content         String
  userId          String
  name            String
  data            Json
  user            User        @relation(fields: [userId], references: [id])
  chatId          String?
  Chat            Chat?       @relation(fields: [chatId], references: [id])
  taskId          String?
  task            Task?       @relation(fields: [taskId], references: [id])
  isGlobalContext Boolean     @default(false)
}

model Project {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  name           String
  description    String?
  type           ProjectType @default(PERSONAL)
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  projectContext Json?
  tasks          Task[]
  chats          Chat[]
}

model Task {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String
  description   String?
  status        TaskStatus   @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  projectId     String?
  project       Project?     @relation(fields: [projectId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  messages      Message[]
  jiraTaskId    String?
  motionEventId String?
}

model Assistant {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          ChatGPTRole @default(ASSISTANT)
  model         String // e.g., "gpt-4"
  globalContext Json // Stores shared knowledge and assistant base personality
}
